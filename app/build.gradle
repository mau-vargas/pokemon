apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.android.pokemon"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "URL", "\"https://pokeapi.co/api/v2/\""

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        noStdlib = true
    }


    buildFeatures {
        dataBinding = true
    }

    lintOptions {
        abortOnError false
    }
}

kapt {
    correctErrorTypes true
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'


    //Jetbrains
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"


    //Android base
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0'

    //ViewModel + LiveData
    implementation 'androidx.lifecycle:lifecycle-runtime:2.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0-rc01'

    //Dagger
    kapt 'com.google.dagger:dagger-android-processor:2.23.2'
    implementation 'com.google.dagger:dagger-android-support:2.23.2'
    kapt 'com.google.dagger:dagger-compiler:2.23.2'
    implementation 'com.google.dagger:dagger:2.25.4'

    //Coroutines
    def coroutinesVersion = "1.3.5"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.8.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.8.1'
    implementation 'com.squareup.retrofit2:converter-simplexml:2.7.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.6.0'

    //Navigation
    def navigationVersion= "2.2.2"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    //room
    def roomVersion = "2.2.5"
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    //Picasso
    def picassoVersion = "2.71828"
    implementation "com.squareup.picasso:picasso:$picassoVersion"

    //UNIT TEST
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation 'org.robolectric:robolectric:4.3'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.2.0'
    testImplementation 'org.mockito:mockito-inline:2.13.0'

}



apply plugin: 'jacoco'

jacoco {
    toolVersion "0.8.5"

}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}


task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    project.logger.lifecycle("buildDir : ${buildDir}")



    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/*Activity*.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            'androidx/**/*.*',
            'io/realm/**/*.*',
            '**/*InjectAdapter*.*',
            '**/*StaticInjection*.*',
            '**/*ModuleAdapter*.*'
    ]

    // generated classes
    classDirectories.from = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )

    // sources
    sourceDirectories.from = files([
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ])

    executionData.setFrom(fileTree(dir: "$project.buildDir", includes: [
            "jacoco/testDevelopmentDebugUnitTest.exec",
            "outputs/code_coverage/developmentDebugAndroidTest/connected/*coverage.ec"
    ]))
}